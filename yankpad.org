#+Description: This is file is generated from my init.org; do not edit.

* Default                                           :global:

** my_org_insert_link: cleverly insert a link copied to clipboard
 [[${1:`(clipboard-yank)`}][$2]] $0

** begin: produce an org-mode block
#+begin_${1:environment$(let*
    ((block '("src" "example" "quote" "verse" "center" "latex" "html" "ascii"))
     (langs '("c" "emacs-lisp" "lisp" "latex" "python" "sh" "haskell" "plantuml" "prolog"))
     (type (yas-choose-value block)))
     (concat type (when (equal type "src") (concat " " (yas-choose-value langs)))))}
 $0
#+end_${1:$(car (split-string yas-text))}

** s_org: src block for org
#+begin_src org
$0
#+end_src

** s_agda2: src block for agda2
#+begin_src agda2
$0
#+end_src

** s_any: src block for any
#+begin_src any
$0
#+end_src

** s_plantuml: src block for plantuml
#+begin_src plantuml
$0
#+end_src

** s_emacs-lisp: src block for emacs-lisp
#+begin_src emacs-lisp
$0
#+end_src

** s_shell: src block for shell
#+begin_src shell
$0
#+end_src

** s_python: src block for python
#+begin_src python
$0
#+end_src

** s_haskell: src block for haskell
#+begin_src haskell
$0
#+end_src

** s_ruby: src block for ruby
#+begin_src ruby
$0
#+end_src

** s_ocaml: src block for ocaml
#+begin_src ocaml
$0
#+end_src

** s_C: src block for C
#+begin_src C
$0
#+end_src

** s_dot: src block for dot
#+begin_src dot
$0
#+end_src

** s_latex: src block for latex
#+begin_src latex
$0
#+end_src

** s_org: src block for org
#+begin_src org
$0
#+end_src

** s_makefile: src block for makefile
#+begin_src makefile
$0
#+end_src

** e_org: example block for org
#+begin_example org
$0
#+end_example

** e_agda2: example block for agda2
#+begin_example agda2
$0
#+end_example

** e_any: example block for any
#+begin_example any
$0
#+end_example

** e_plantuml: example block for plantuml
#+begin_example plantuml
$0
#+end_example

** e_emacs-lisp: example block for emacs-lisp
#+begin_example emacs-lisp
$0
#+end_example

** e_shell: example block for shell
#+begin_example shell
$0
#+end_example

** e_python: example block for python
#+begin_example python
$0
#+end_example

** e_haskell: example block for haskell
#+begin_example haskell
$0
#+end_example

** e_ruby: example block for ruby
#+begin_example ruby
$0
#+end_example

** e_ocaml: example block for ocaml
#+begin_example ocaml
$0
#+end_example

** e_C: example block for C
#+begin_example C
$0
#+end_example

** e_dot: example block for dot
#+begin_example dot
$0
#+end_example

** e_latex: example block for latex
#+begin_example latex
$0
#+end_example

** e_org: example block for org
#+begin_example org
$0
#+end_example

** e_makefile: example block for makefile
#+begin_example makefile
$0
#+end_example

** q_org: quote block for org
#+begin_quote org
$0
#+end_quote

** q_agda2: quote block for agda2
#+begin_quote agda2
$0
#+end_quote

** q_any: quote block for any
#+begin_quote any
$0
#+end_quote

** q_plantuml: quote block for plantuml
#+begin_quote plantuml
$0
#+end_quote

** q_emacs-lisp: quote block for emacs-lisp
#+begin_quote emacs-lisp
$0
#+end_quote

** q_shell: quote block for shell
#+begin_quote shell
$0
#+end_quote

** q_python: quote block for python
#+begin_quote python
$0
#+end_quote

** q_haskell: quote block for haskell
#+begin_quote haskell
$0
#+end_quote

** q_ruby: quote block for ruby
#+begin_quote ruby
$0
#+end_quote

** q_ocaml: quote block for ocaml
#+begin_quote ocaml
$0
#+end_quote

** q_C: quote block for C
#+begin_quote C
$0
#+end_quote

** q_dot: quote block for dot
#+begin_quote dot
$0
#+end_quote

** q_latex: quote block for latex
#+begin_quote latex
$0
#+end_quote

** q_org: quote block for org
#+begin_quote org
$0
#+end_quote

** q_makefile: quote block for makefile
#+begin_quote makefile
$0
#+end_quote

** v_org: verse block for org
#+begin_verse org
$0
#+end_verse

** v_agda2: verse block for agda2
#+begin_verse agda2
$0
#+end_verse

** v_any: verse block for any
#+begin_verse any
$0
#+end_verse

** v_plantuml: verse block for plantuml
#+begin_verse plantuml
$0
#+end_verse

** v_emacs-lisp: verse block for emacs-lisp
#+begin_verse emacs-lisp
$0
#+end_verse

** v_shell: verse block for shell
#+begin_verse shell
$0
#+end_verse

** v_python: verse block for python
#+begin_verse python
$0
#+end_verse

** v_haskell: verse block for haskell
#+begin_verse haskell
$0
#+end_verse

** v_ruby: verse block for ruby
#+begin_verse ruby
$0
#+end_verse

** v_ocaml: verse block for ocaml
#+begin_verse ocaml
$0
#+end_verse

** v_C: verse block for C
#+begin_verse C
$0
#+end_verse

** v_dot: verse block for dot
#+begin_verse dot
$0
#+end_verse

** v_latex: verse block for latex
#+begin_verse latex
$0
#+end_verse

** v_org: verse block for org
#+begin_verse org
$0
#+end_verse

** v_makefile: verse block for makefile
#+begin_verse makefile
$0
#+end_verse

** c_org: center block for org
#+begin_center org
$0
#+end_center

** c_agda2: center block for agda2
#+begin_center agda2
$0
#+end_center

** c_any: center block for any
#+begin_center any
$0
#+end_center

** c_plantuml: center block for plantuml
#+begin_center plantuml
$0
#+end_center

** c_emacs-lisp: center block for emacs-lisp
#+begin_center emacs-lisp
$0
#+end_center

** c_shell: center block for shell
#+begin_center shell
$0
#+end_center

** c_python: center block for python
#+begin_center python
$0
#+end_center

** c_haskell: center block for haskell
#+begin_center haskell
$0
#+end_center

** c_ruby: center block for ruby
#+begin_center ruby
$0
#+end_center

** c_ocaml: center block for ocaml
#+begin_center ocaml
$0
#+end_center

** c_C: center block for C
#+begin_center C
$0
#+end_center

** c_dot: center block for dot
#+begin_center dot
$0
#+end_center

** c_latex: center block for latex
#+begin_center latex
$0
#+end_center

** c_org: center block for org
#+begin_center org
$0
#+end_center

** c_makefile: center block for makefile
#+begin_center makefile
$0
#+end_center

** ex_org: export block for org
#+begin_export org
$0
#+end_export

** ex_agda2: export block for agda2
#+begin_export agda2
$0
#+end_export

** ex_any: export block for any
#+begin_export any
$0
#+end_export

** ex_plantuml: export block for plantuml
#+begin_export plantuml
$0
#+end_export

** ex_emacs-lisp: export block for emacs-lisp
#+begin_export emacs-lisp
$0
#+end_export

** ex_shell: export block for shell
#+begin_export shell
$0
#+end_export

** ex_python: export block for python
#+begin_export python
$0
#+end_export

** ex_haskell: export block for haskell
#+begin_export haskell
$0
#+end_export

** ex_ruby: export block for ruby
#+begin_export ruby
$0
#+end_export

** ex_ocaml: export block for ocaml
#+begin_export ocaml
$0
#+end_export

** ex_C: export block for C
#+begin_export C
$0
#+end_export

** ex_dot: export block for dot
#+begin_export dot
$0
#+end_export

** ex_latex: export block for latex
#+begin_export latex
$0
#+end_export

** ex_org: export block for org
#+begin_export org
$0
#+end_export

** ex_makefile: export block for makefile
#+begin_export makefile
$0
#+end_export

** loop:  Elisp's for each loop
(dolist (${1:var} ${2:list-form})
        ${3:body})

** defun: Lisp functions
(cl-defun ${1:fun-name} (${2:arguments})
  "${3:documentation}"
  $0
)

** cond: Elisp conditionals
(cond (${1:scenario₁} ${2:response₁})
      (${3:scenario₂} ${4:response₂})
)

** fun: Function declaration with type signature

${1:fun-name} : ${2:arguments}
$1 ${3:args} = ?$0

** eqn_begin: Start a ≡-Reasoning block in Agda

begin
  ${1:complicated-side}
$0≡⟨ ${3:reason-for-the-equality} ⟩
 ${2:simpler-side}
∎

** eqn_step: Insert a step in a ≡-Reasoning block in Agda
≡⟨ ${2:reason-for-the-equality} ⟩
  ${1:new-expression}
$0

** my_name: User's name
`user-full-name`

** my_email: User's email address
`user-mail-address`

** my_github: User's Github repoistory link
https://github.com/alhassy/

** my_emacsdrepo: User's version controlled Emacs init file
https://github.com/alhassy/emacs.d

** my_blog: User's blog website
https://alhassy.github.io/

** my_webpage: User's organisation website
http://www.cas.mcmaster.ca/~alhassm/

** my_twitter: User's Twitter profile
https://twitter.com/musa314

** my_masters_thesis
A Mechanisation of Internal Galois Connections In Order Theory Formalised Without Meets
https://macsphere.mcmaster.ca/bitstream/11375/17276/2/thesis.pdf

** journal_guided: Introspection & Growth
I'm writing from ${1:location}.

Gut answer, today I feel ${2:scale}/10.
⇒ ${3:Few words or paragraphs to explain what's on your mind.}

${4: All things which cause us to groan or recoil are part of the tax of
life. These things you should never hope or seek to escape.  Life is a battle,
and to live is to fight.

⟨ Press TAB once you've read this mantra. ⟩
$(when yas-moving-away-p "")
}
`(progn
  (eww "https://www.dailyinspirationalquotes.in/")
  (sit-for 2) (when nil let eww load)
  (read-only-mode -1)
  (goto-line 52)
  (kill-line)
  (kill-buffer)
  (yank))`
${7:
Self Beliefs:
+ I am working on a healthier lifestyle, including a low-carb diet.

  - I’m also investing in a healthy, long-lasting relationship.

  ➩ These are what I want and are important to me. ⇦

+ I will not use any substances to avoid real issues in my life. I must own them.

+ Everything I’m searching for is already inside of me.

+ Progress is more important than perfection.

⟨ Press TAB once you've read these beliefs. ⟩
$(when yas-moving-away-p "")
}

*Three things I'm grateful for:*
1. ${8:??? … e.g., old relationship, something great yesterday, an opportunity I
   have today, something simple near me within sight}
2. ${9:??? … e.g., old relationship, something great yesterday, an opportunity I
   have today, something simple near me within sight}
3. ${10:??? … e.g., old relationship, something great yesterday, an opportunity I
   have today, something simple near me within sight}

*Three things that would make today great:*
1. ${11:???}
2. ${12:???}
3. ${13:???}

*What one thing is top of mind today?*
${14:???}

*What’s one opportunity I want to go after?*
${15:???}

*What’s one thing I’m really proud of OR I’m amazed and in awe of?*
${16:???}

$0
